# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.


report: "report/workflow.rst"


# Allow users to fix the underlying OS via singularity.
container: "docker://continuumio/miniconda3"

configfile: "config/config.yaml"

include: "rules/common.py"
if "refactor_addpositions" in config and config["refactor_addpositions"]:
    include: "rules/refactor.smk"

    rule all_add_positions:
        input:
            get_all_raw_addpositions_outputs(),
            get_all_raw_addpositions_outputs("fluo-ce"),
            get_all_qushape_addpositions_outputs()

elif "refactor_rename" in config and config["refactor_rename"]:
    include: "rules/refactor.smk"
    rule all_rename:
        input:
            get_all_raw_rename_outputs(),
            get_all_raw_rename_outputs("fluo-ce"),
            get_all_qushape_rename_outputs()

elif "convert_qushape" in config and config["convert_qushape"]:
    include: "rules/convert_qushape.smk"
    rule all_convert:
        input:
            get_all_qushapey_outputs()
else:
    include: "rules/tools.smk"
    include: "rules/other.smk"
    include: "rules/ipanemap.smk"
    include: "rules/importation.smk"


    rule all:
        input:
            #get_final_outputs()
            #get_all_raw_outputs()
            #get_all_qushape_outputs()
            #get_all_reactivity_outputs()
            #get_all_aggreact_outputs()
            #get_all_structure_outputs
            aggregates=get_all_aggreact_outputs(),
            #structures = get_all_structure_outputs
            varna_by_cond=get_all_varna_by_condition_outputs,
            footprint=get_all_footprint_outputs,
            #varna_pool_concat=get_all_varna_pool_concat_outputs
            # The first rule should define the default target files
            # Subsequent target rules can be specified below. They should start with all_*.
    
    
    rule all_aggregate:
        input:
            get_all_aggreact_outputs()
    
    
    rule all_qushape:
        input:
            get_all_qushape_outputs()

    
